import java.util.Arrays;

public class AESKeyExpansion {
    private static final int AES_KEY_SIZE = 16; // 128-bit key
    private static final int WORDS_IN_KEY = 4; // 4 words (4 bytes each)
    private static final int EXPANDED_KEY_WORDS = 44; // Total words in expanded key
    private static final int[] RCON = {
            0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36
    };
    private static final int[] S_BOX = {
            // AES S-Box
            0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
            0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
            0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
            0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
            0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
            0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
            0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
            0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2
    };

    private static int subWord(int word) {
        return (sBox((word >> 24) & 0xFF) << 24) |
               (sBox((word >> 16) & 0xFF) << 16) |
               (sBox((word >> 8) & 0xFF) << 8) |
               (sBox(word & 0xFF));
    }

    private static int rotWord(int word) {
        return ((word << 8) | ((word >> 24) & 0xFF));
    }

    private static int sBox(int byteVal) {
        return S_BOX[byteVal];
    }

    public static int[] expandKey(byte[] key) {
        int[] expandedKey = new int[EXPANDED_KEY_WORDS];

        for (int i = 0; i < WORDS_IN_KEY; i++) {
            expandedKey[i] = ((key[i * 4] & 0xFF) << 24) |
                             ((key[i * 4 + 1] & 0xFF) << 16) |
                             ((key[i * 4 + 2] & 0xFF) << 8) |
                             (key[i * 4 + 3] & 0xFF);
        }

        for (int i = WORDS_IN_KEY; i < EXPANDED_KEY_WORDS; i++) {
            int temp = expandedKey[i - 1];
            if (i % WORDS_IN_KEY == 0) {
                temp = subWord(rotWord(temp)) ^ (RCON[(i / WORDS_IN_KEY) - 1] << 24);
            }
            expandedKey[i] = expandedKey[i - WORDS_IN_KEY] ^ temp;
        }

        return expandedKey;
    }

    public static void printExpandedKey(int[] expandedKey) {
        for (int i = 0; i < expandedKey.length; i++) {
            System.out.printf("Word %2d: %08X\n", i, expandedKey[i]);
        }
    }

    public static void main(String[] args) {
        byte[] key = {(byte) 0x2b, (byte) 0x7e, (byte) 0x15, (byte) 0x16,
                      (byte) 0x28, (byte) 0xae, (byte) 0xd2, (byte) 0xa6,
                      (byte) 0xab, (byte) 0xf7, (byte) 0x15, (byte) 0x88,
                      (byte) 0x09, (byte) 0xcf, (byte) 0x4f, (byte) 0x3c};
        
        int[] expandedKey = expandKey(key);
        printExpandedKey(expandedKey);
    }
}
